cmake_minimum_required(VERSION 3.0)

set(CMAKE_BUILD_TYPE Debug)
set(dir ${CMAKE_CURRENT_SOURCE_DIR}/build/)
set(EXECUTABLE_OUTPUT_PATH ${dir} CACHE PATH "Build directory" FORCE)
set(LIBRARY_OUTPUT_PATH ${dir} CACHE PATH "Build directory" FORCE)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${dir})
set(CMAKE_BUILD_FILES_DIRECTORY ${dir})
set(CMAKE_BUILD_DIRECTORY ${dir})
set(CMAKE_BINARY_DIR ${dir})
set(EXECUTABLE_OUTPUT_PATH ${dir})
set(LIBRARY_OUTPUT_PATH ${dir}lib)
set(CMAKE_CACHEFILE_DIR ${dir})

add_compile_definitions(OMP_NUM_THREADS=4)

if(DEFINED NUMBER_OF_THREADS)
    message("Definido número de hilos: ${NUMBER_OF_THREADS}")
    add_compile_definitions(NUMBER_OF_THREADS=${NUMBER_OF_THREADS})
endif()

if(DEFINED NUMBER_OF_BLOCKS)
    message("Definido número de bloques: ${NUMBER_OF_BLOCKS}")
    add_compile_definitions(NUMBER_OF_BLOCKS=${NUMBER_OF_BLOCKS})
endif()

if(DEFINED WITH_CUDA)
    message("Compilando con CUDA")
    project(TireDetector LANGUAGES CUDA CXX)
else()
    message("Compilando sin CUDA")
    project(TireDetector LANGUAGES CXX)
endif()

find_package(OpenMP REQUIRED)
find_package(OpenCV REQUIRED)
find_package(MPI)
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(SYSTEM ${MPI_INCLUDE_PATH})
add_library(listDir src/listDir.cpp)

if(DEFINED WITH_CUDA)
    add_executable(TireDetector src/main.cu)
    target_link_libraries(TireDetector listDir ${OpenCV_LIBS} OpenMP::OpenMP_CXX)
endif()

add_executable(Threaded src/threaded.cpp)
add_executable(Secuencial src/secuencial.cpp)
add_executable(OpenMPI src/mpi.cpp)
target_link_libraries(Threaded listDir ${OpenCV_LIBS} OpenMP::OpenMP_CXX)
target_link_libraries(Secuencial listDir ${OpenCV_LIBS})
target_link_libraries(OpenMPI PUBLIC listDir ${OpenCV_LIBS} ${MPI_C_LIBRARIES} MPI::MPI_CXX)
